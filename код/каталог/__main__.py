from наки.__main__ import Контејнер
from наки.карте import Карта


class Картограф():
    def __init__(бре, лепа_путања, извор, старт=None):
        бре.лепа_путања = лепа_путања
        бре.извор = извор
        if старт is None:
            старт = 0
        бре.индекс = iter(range(старт, 16))

    def __call__(бре, врста_карте, ф_питање, ф_одговор):
        карте = []
        хекс_индекс = hex(next(бре.индекс))[-1]
        for линија, џ in enumerate(бре.извор, 2):
            ид = џ[0]  # претпоставка је да је нулто поље ИД
            assert ид[-1] == '0', 'извор ид мора да се завршава са нулом: ' + ид
            ид = ид[:-1] + хекс_индекс
            карте.append(Карта(ид, врста_карте, ф_питање(џ), ф_одговор(џ), бре.лепа_путања, линија))
        return карте


def одради_шпил(т_карти, т_линкова, дир, извор_учитај, извор_одради):
    карте = []
    линкови = []
    извор_дир = дир.joinpath('извор')
    for извор_фајл in sorted(ф for ф in извор_дир.iterdir() if ф.is_file()):
        лепа_путања = дир.name + '/извор/' + извор_фајл.name
        print(лепа_путања)
        извор = извор_учитај(извор_фајл)
        к, л = извор_одради(Картограф(лепа_путања, извор))
        карте.extend(к)
        линкови.extend(л)
    путања = дир.joinpath('карте.tsv')
    if путања.exists():
        путања.unlink()
    т_карти.додај(карте)
    if линкови:
        путања = дир.joinpath('линкови.tsv')
        if путања.exists():
            путања.unlink()
        т_линкова.додај(линкови)


def нађи_извор(име_шпила):
    if име_шпила in ["de_Basic", "de_Präteritum"]:
        from каталог.извори.de_basic import извор_учитај, извор_одради
    elif име_шпила in ["de_Verben"]:
        from каталог.извори.de_verben import извор_учитај, извор_одради
    elif име_шпила == "de_Nomen":
        from каталог.извори.de_nomen import извор_учитај, извор_одради
    elif име_шпила == "de_Und":
        from каталог.извори.de_und import извор_учитај, извор_одради
    elif име_шпила == "de_Cloze":
        from каталог.извори.de_cloze import извор_учитај, извор_одради
    elif име_шпила == "de_Deklination":
        from каталог.извори.de_deklination import извор_учитај, извор_одради
    elif име_шпила in ["de_Einweg", "чворови", "_SVAKI_DAN_"]:
        from каталог.извори.de_einweg import извор_учитај, извор_одради
    elif име_шпила == "песме":
        from каталог.извори.песме import извор_учитај, извор_одради
    elif име_шпила.startswith("тест_"):
        from каталог.извори.тест_дата_генератор import извор_учитај, извор_одради
    else:
        raise Exception(f"Некатегоризован шпил: {име_шпила}")
    return (извор_учитај, извор_одради)


def главна():
    к = Контејнер()
    for шк in к.шпил_контејнери():
        шпил = шк.шпил()
        извор_учитај, извор_одради = нађи_извор(шпил._дир.name)
        одради_шпил(шк.т_карти(), шк.т_линкова(), шпил._дир, извор_учитај, извор_одради)


if __name__ == '__main__':
    главна()

