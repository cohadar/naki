from enum import unique, IntEnum
from collections import namedtuple
from datetime import date


@unique
class ИнтервалиЕнум(IntEnum):
    ВРСТА_КАРТЕ = 0
    ДАТУМ = 1
    ИНТЕРВАЛИ = 2


БРОЈ_ИНТЕРВАЛА = 9


ИнтервалиВрсте = namedtuple('ИнтервалиВрсте', ['врста_карте', 'датум', 'интервали'])


class ТабелаИнтервала():
    def __init__(бре, tsv, путања):
        бре._tsv = tsv
        бре._путања = путања
        бре._редови = []

    def учитај(бре):
        бре._редови = бре._tsv.учитај_фајл(бре._путања, ИнтервалиЕнум)

    def додај(бре, редови):
        бре._редови.extend(редови)
        бре._tsv.додај_на_фајл(бре._путања, ИнтервалиЕнум, редови)

    def __len__(бре):
        return len(бре._редови)

    def __iter__(бре):
        return iter(бре._редови)


class ПогледИнтервала():
    def __init__(бре, табела):
        бре._табела = табела
        бре._табела.учитај()
        бре._интервали = [бре.од_сировог(си) for си in бре._табела]
        бре._интервали.sort(key=lambda и: и.датум, reverse=True)

    @staticmethod
    def од_сировог(си):
        ив = [int(и.strip()) for и in си[2].split(',')]
        assert all(а < б for (а, б) in zip(ив[:-1], ив[1:]))
        return ИнтервалиВрсте(си[0], date.fromisoformat(си[1]), ив)

    @staticmethod
    def предефинисани_интервали(врста_карте):
        return [
            врста_карте,
            date.today().isoformat(),
            "1, 6, 15, 38, 94, 234, 586, 1465, 3662"
        ]

    def има_врсту_карте(бре, врста_карте):
        for ив in бре._интервали:
            if ив.врста_карте == врста_карте:
                return True
        return False

    def консолидуј(бре, скуп_врста_карте):
        assert isinstance(скуп_врста_карте, set)
        нови_интервали = []
        for врста_карте in скуп_врста_карте:
            if not бре.има_врсту_карте(врста_карте):
                си = бре.предефинисани_интервали(врста_карте)
                нови_интервали.append(си)
                ив = бре.од_сировог(си)
                бре._интервали.append(ив)
        if нови_интервали:
            бре._табела.додај(нови_интервали)
        бре._интервали.sort(key=lambda и: и.датум, reverse=True)
        assert len(бре._табела) == len(бре._интервали)

    def период_интервала(бре, врста_карте, индекс_интервала):
        for и in бре._интервали:
            if и.врста_карте == врста_карте:
                return и.интервали[индекс_интервала]
        raise KeyError(f'период_интервала(врста_карте="{врста_карте}", индекс_интервала="{индекс_интервала}")')

    def __len__(бре):
        return len(бре._интервали)

