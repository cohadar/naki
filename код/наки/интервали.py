from наки import tsv
from enum import unique, IntEnum
from collections import namedtuple
from datetime import date


# TODO: kad se izbaci enum, da moже да буде различит број интервала по врсти карте
@unique
class ИнтервалиЕнум(IntEnum):
    ВРСТА_КАРТЕ = 0
    ДАТУМ = 1
    ИНТЕРВАЛИ = 2


БРОЈ_ИНТЕРВАЛА = 10


ИнтервалиВрсте = namedtuple('ИнтервалиВрсте', ['врста_карте', 'датум', 'интервали'])


class ТабелаИнтервала():
    def __init__(бре, путања):
        бре._путања = путања
        бре._редови = []

    def учитај(бре):
        бре._редови = tsv.учитај_фајл(бре._путања, ИнтервалиЕнум) if бре._путања.exists() else []

    def додај(бре, редови):
        бре._редови.extend(редови)
        tsv.додај_на_фајл(бре._путања, ИнтервалиЕнум, редови)

    def __len__(бре):
        return len(бре._редови)

    def __iter__(бре):
        return iter(бре._редови)


class ПогледИнтервала():
    def _парсирај(бре, си):
        ив = бре.од_сировог(си)
        бре.листа_интервала_врсте.append(ив)
        бре._додај_интервал_врсте(ив)

    def __init__(бре, табела):
        бре._табела = табела
        бре.листа_интервала_врсте = []
        бре.мапа_интервала = {}
        for си in бре._табела:
            бре._парсирај(си)

    def _додај_интервал_врсте(бре, ив):
        постојећи = бре.мапа_интервала.get(ив.врста_карте)
        if постојећи is None or постојећи.датум < ив.датум:
            бре.мапа_интервала[ив.врста_карте] = ив
            return True
        return False

    @staticmethod
    def од_сировог(си):
        ив = [int(и.strip()) for и in си[2].split(',')]
        assert all(а < б for (а, б) in zip(ив[:-1], ив[1:]))
        return ИнтервалиВрсте(си[0], date.fromisoformat(си[1]), ив)

    @staticmethod
    def предефинисани_интервали(врста_карте):
        return [
            врста_карте,
            date.today().isoformat(),
            "1, 6, 15, 38, 94, 234, 586, 1465, 3662"
        ]

    def консолидуј(бре, скуп_врста_карте):
        нови_интервали = []
        for врста_карте in скуп_врста_карте:
            if врста_карте not in бре.мапа_интервала:
                си = бре.предефинисани_интервали(врста_карте)
                нови_интервали.append(си)
                бре._парсирај(си)
        if нови_интервали:
            бре._табела.додај(нови_интервали)

    def макс_интервал(бре, врста_карте):
        return len(бре.мапа_интервала[врста_карте].интервали)

    def период_интервала(бре, врста_карте, индекс_интервала):
        return бре.мапа_интервала[врста_карте].интервали[индекс_интервала]

