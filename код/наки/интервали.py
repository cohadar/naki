from enum import unique, IntEnum
from collections import namedtuple
from datetime import date


# TODO: kad se izbaci enum, da moже да буде различит број интервала по врсти карте
@unique
class ИнтервалиЕнум(IntEnum):
    ВРСТА_КАРТЕ = 0
    ДАТУМ = 1
    И1 = 2
    И2 = 3
    И3 = 4
    И4 = 5
    И5 = 6
    И6 = 7
    И7 = 8
    И8 = 9
    И9 = 10


ИнтервалиВрсте = namedtuple('ИнтервалиВрсте', ['врста_карте', 'датум', 'интервали'])


class ФајлИнтервала():
    def __init__(бре, tsv, путања, сирови_интервали):
        бре._tsv = tsv
        бре.путања = путања
        бре.листа_интервала_врсте = []
        for си in сирови_интервали:
            ив = ИнтервалиВрсте(си[0], date.fromisoformat(си[1]), си[2:])
            бре.листа_интервала_врсте.append(бре.од_сировог(си))
        бре.мапа_интервала = {}
        for ив in бре.листа_интервала_врсте:
            бре._додај_интервал_врсте(ив)

    def _додај_интервал_врсте(бре, ив):
        постојећи = бре.мапа_интервала.get(ив.врста_карте)
        if постојећи is None or постојећи.датум < ив.датум:
            бре.мапа_интервала[ив.врста_карте] = ив
            return True
        return False

    @staticmethod
    def од_сировог(си):
        ив = [int(и) for и in си[2:]]
        assert all(а < б for (а, б) in zip(ив[:-1], ив[1:]))
        return ИнтервалиВрсте(си[0], date.fromisoformat(си[1]), ив)

    @staticmethod
    def учитај(tsv, путања):
        сирови_интервали = tsv.учитај_фајл(путања, ИнтервалиЕнум) if путања.exists() else []
        return ФајлИнтервала(tsv, путања, сирови_интервали)

    @staticmethod
    def предефинисани_интервали(врста_карте):
        return [
            врста_карте,
            date.today().isoformat(),
            "1", "6", "15", "38", "94", "234", "586", "1465", "3662"
        ]

    def консолидуј(бре, скуп_врста_карте):
        нови_интервали = []
        for врста_карте in скуп_врста_карте:
            if врста_карте not in бре.мапа_интервала:
                си = бре.предефинисани_интервали(врста_карте)
                нови_интервали.append(си)
                ив = бре.од_сировог(си)
                бре.листа_интервала_врсте.append(ив)
                бре._додај_интервал_врсте(ив)
        if нови_интервали:
            бре._tsv.додај_на_фајл(бре.путања, ИнтервалиЕнум, нови_интервали)

    def макс_интервал(бре, врста_карте):
        return len(бре.мапа_интервала[врста_карте].интервали)

    def период_интервала(бре, врста_карте, индекс_интервала):
        return бре.мапа_интервала[врста_карте].интервали[индекс_интервала]
