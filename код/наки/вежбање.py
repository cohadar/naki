from наки.карте import Карта
from наки.команда import Регистар, КОМАНДА_ПРЕКИД


class Вежбање():
    def _учитај(бре):
        бре.неодрађене = set(карта[Карта.ИД] for карта in бре.шпил)
        бре.промашене = set()

    def __init__(бре, путања_каталога, шпил):
        бре.шпил = шпил
        бре.путања_каталога = путања_каталога
        бре._учитај()
        бре.регистар_питање = Регистар()
        бре.регистар_питање.региструј(КОМАНДА_ПРЕКИД, бре.а_прекид)
        бре.регистар_одговор = Регистар()
        бре.регистар_одговор.региструј(КОМАНДА_ПРЕКИД, бре.а_прекид)
        бре.прекид = False

    def а_прекид(бре, код):
        бре.прекид = True

    def име_шпила(бре):
        return бре.шпил.име()

    def __len__(бре):
        return len(бре.шпил)

    def __call__(бре, ui):
        бре.шпил.рандомизуј()
        for карта in бре.шпил:
            ид = карта[Карта.ИД]
            урл = бре.шпил.урл(ид)
            број_карата = f"{len(бре.неодрађене)}+{len(бре.промашене)}"
            наслов = карта[Карта.ВРСТА_КАРТЕ.value]
            питање = карта[Карта.ПИТАЊЕ.value]
            одговор = карта[Карта.ОДГОВОР.value]
            извор = карта[Карта.ИЗВОР.value]
            линија = карта[Карта.ЛИНИЈА.value]
            ui.питање(бре.регистар_питање, бре.путања_каталога, наслов, питање, одговор, извор, линија, број_карата, урл)
            if бре.прекид:
                break
            оцена = ui.одговор(бре.регистар_одговор, бре.путања_каталога, наслов, питање, одговор, извор, линија, број_карата, урл)
            if бре.прекид:
                break
            бре.шпил.оцена(ид, оцена)
            бре.неодрађене.discard(ид)
            if оцена > 0:
                бре.промашене.discard(ид)
            else:
                бре.промашене.add(ид)
        бре.шпил.clear()
        return бре.сиже()

    def преполови(бре):
        бре.шпил.преполови()
        бре._учитај()

    def избаци_промашене(бре):
        бре.шпил.избаци_промашене()
        бре._учитај()

    def задржи_само_промашене(бре):
        бре.шпил.задржи_само_промашене()
        бре._учитај()

    def сиже(бре):
        return (len(бре.неодрађене), len(бре.промашене))
