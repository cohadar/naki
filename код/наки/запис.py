import time
from datetime import date
from enum import unique, IntEnum
from collections import namedtuple, Counter


@unique
class ЗаписЕнум(IntEnum):
    КАРТА_ИД = 0
    ДАТУМ_ПРЕГЛЕДА = 1
    ВРЕМЕ_ПРЕГЛЕДА = 2
    РЕЗУЛТАТ_ПРЕГЛЕДА = 3
    НОВИ_ИНТЕРВАЛ = 4


# TODO: if unused delete
Запис2 = namedtuple('Запис', [
    'карта_ид',
    'датум_прегледа',
    'време_прегледа',
    'резултат_прегледа',
    'нови_интервал'
])


# TODO: migrate to ФајлКарти
def провери_карта_ид(ид):
    assert len(ид) == 32, f"лоша дужина {ид}"


class ФајлЗаписа():
    def __init__(бре, tsv, путања, сирови_запис):
        бре._tsv = tsv
        бре._путања = путања
        бре._последња_оцена = {}
        бре._нови_интервал = Counter()
        бре._датум_прегледа = {}
        for з in сирови_запис:
            ид = з[ЗаписЕнум.КАРТА_ИД]
            провери_карта_ид(ид)
            оцена = int(з[ЗаписЕнум.РЕЗУЛТАТ_ПРЕГЛЕДА])
            бре._последња_оцена[ид] = оцена
            if оцена > 0:
                бре._нови_интервал[ид] = int(з[ЗаписЕнум.НОВИ_ИНТЕРВАЛ])
                бре._датум_прегледа[ид] = date.fromisoformat(з[ЗаписЕнум.ДАТУМ_ПРЕГЛЕДА])

    @staticmethod
    def учитај(tsv, путања):
        сирови_запис = tsv.учитај_фајл(путања, ЗаписЕнум) if путања.exists() else []
        return ФајлЗаписа(tsv, путања, сирови_запис)

    def датум_прегледа(бре, ид):
        давно = date.fromisoformat('1970-01-01')
        return бре._датум_прегледа.get(ид, давно)

    def индекс_интервала(бре, ид):
        return бре._нови_интервал[ид] - 1

    def додај_нови_интервал(бре, ид, оцена, макс_интервал):
        бре._нови_интервал[ид] = min(бре._нови_интервал[ид] + оцена, макс_интервал)
        ред = [
            ид,
            time.strftime('%Y-%m-%d'),
            time.strftime('%H:%M:%S%z'),
            оцена,
            бре._нови_интервал[ид],
        ]
        бре._tsv.додај_на_фајл(бре._путања, ЗаписЕнум, [ред])

    def промашена(бре, ид):
        return бре._последња_оцена.get(ид, 10000) > 0
