import sys
import time
from random import shuffle
from collections import defaultdict
from datetime import date, timedelta
from collections import Counter
from enum import IntEnum, unique
from наки import tsv


@unique
class Карта(IntEnum):
    ИД = 0
    ВРСТА_КАРТЕ = 1
    ПИТАЊЕ = 2
    ОДГОВОР = 3
    ИЗВОР = 4
    ЛИНИЈА = 5


@unique
class Запис(IntEnum):
    КАРТА_ИД = 0
    ДАТУМ_ПРЕГЛЕДА = 1
    ВРЕМЕ_ПРЕГЛЕДА = 2
    РЕЗУЛТАТ_ПРЕГЛЕДА = 3
    НОВИ_ИНТЕРВАЛ = 4


@unique
class Линк(IntEnum):
    ИД = 0
    УРЛ = 1


@unique
class Интервали(IntEnum):
    ДАТУМ = 0
    И1 = 1
    И2 = 2
    И3 = 3
    И4 = 4
    И5 = 5
    И6 = 6
    И7 = 7
    И8 = 8
    И9 = 9


МАКС_ИНТЕРВАЛ = len(Интервали)


def направи_карте(извор_фајл, извор, врста_карте, ф_питање, ф_одговор, индекс):
    """ постарај се да индекс буде јединствен при сваком позиву """
    assert 0 <= индекс and индекс < 16
    карте = []
    for линија, џ in enumerate(извор, 2):
        ид = џ[0]  # претпоставка је да је нулто поље ИД
        assert ид[-1] == '0', 'извор ид мора да се завршава са нулом: ' + ид
        ид = ид[:-1] + hex(индекс)[-1]
        карте.append([ид, врста_карте, ф_питање(џ), ф_одговор(џ), извор_фајл, линија])
    return карте


def извор_ид(карта_ид):
    return карта_ид[:-1] + '0'


def шпил_диск_лоадер(дир):
    интервали = tsv.учитај_фајл(дир.joinpath('интервали.tsv'), Интервали)
    карте = tsv.учитај_фајл(дир.joinpath('карте.tsv'), Карта)
    линкови_фајл = дир.joinpath('линкови.tsv')
    линкови = tsv.учитај_фајл(линкови_фајл, Линк) if линкови_фајл.exists() else []
    запис_фајл = дир.joinpath('запис.tsv')
    запис = tsv.учитај_фајл(запис_фајл, Запис) if запис_фајл.exists() else []

    def додај_запис(ред):
        tsv.додај_на_фајл(запис_фајл, Запис, [ред])

    return {
        "име": дир.name,
        "интервали": интервали,
        "карте": карте,
        "линкови": линкови,
        "запис": запис,
        "додај_запис": додај_запис,
    }


def провери_ид(ид):
    assert len(ид) == 32, ид
    assert ид[-1] == '0', ид


class Шпил():
    @staticmethod
    def _парсирај_интервале(интервали):
        интервали = интервали[-1][1:]
        интервали = [int(и) for и in интервали]
        assert all(и <= ј for (и, ј) in zip(интервали[:-1], интервали[1:]))
        return интервали

    @staticmethod
    def _парсирај_запис(запис):
        нови_интервал = Counter()
        датум_прегледа = {}
        последња_оцена = {}
        for з in запис:
            оцена = int(з[Запис.РЕЗУЛТАТ_ПРЕГЛЕДА])
            последња_оцена[з[Запис.КАРТА_ИД]] = оцена
            if оцена > 0:
                нови_интервал[з[Запис.КАРТА_ИД]] = int(з[Запис.НОВИ_ИНТЕРВАЛ])
                датум_прегледа[з[Запис.КАРТА_ИД]] = date.fromisoformat(з[Запис.ДАТУМ_ПРЕГЛЕДА])
        return (нови_интервал, датум_прегледа, последња_оцена)

    @staticmethod
    def _парсирај_линкове(линкови):
        линк_мапа = {}
        for л in линкови:
            ид = л[Линк.ИД]
            урл = л[Линк.УРЛ]
            провери_ид(ид)
            if ид in линк_мапа:
                raise ValueError(f"Дупли линк ид: {ид}")
            линк_мапа[ид] = урл
        return линк_мапа

    def _може_данас(бре, ид):
        данас = date.today()
        давно = date.fromisoformat('1970-01-01')
        дп = бре.датум_прегледа.get(ид, давно)
        ни = timedelta(days=бре.интервали[бре.нови_интервал[ид]-1])
        return данас > дп + ни

    def _парсирај_карте(бре, карте):
        нађено = False
        дупло = set()
        for карта in карте:
            питање = f"{карта[Карта.ВРСТА_КАРТЕ]}: {карта[Карта.ПИТАЊЕ]}"
            if питање in дупло:
                print(f"ДУПЛИКАТ: {питање}", file=sys.stderr)
                нађено = True
            дупло.add(питање)
        if нађено:
            raise ValueError("ДУПЛИКАТИ")
        return [карта for карта in карте if бре._може_данас(карта[Карта.ИД])]

    def __init__(бре, име, интервали, карте, линкови, запис, додај_запис):
        бре._име = име
        бре.интервали = бре._парсирај_интервале(интервали)
        бре.нови_интервал, бре.датум_прегледа, бре.последња_оцена = бре._парсирај_запис(запис)
        бре.линк_мапа = бре._парсирај_линкове(линкови)
        бре.активне = бре._парсирај_карте(карте)
        бре.додај_запис = додај_запис

    def рандомизуј(бре):
        по_врсти = defaultdict(list)
        for карта in бре.активне:
            врста = карта[Карта.ВРСТА_КАРТЕ]
            по_врсти[врста].append(карта)
        темп = []
        for в in по_врсти.values():
            shuffle(в)
            темп.extend(в)
        бре.активне = темп

    def __len__(бре):
        return len(бре.активне)

    def __iter__(бре):
        return iter(бре.активне)

    def clear(бре):
        бре.активне.clear()

    def урл(бре, ид):
        return бре.линк_мапа.get(извор_ид(ид), None)

    def оцена(бре, ид, оцена):
        # TODO: validacijа ид i ocena
        бре.нови_интервал[ид] = min(бре.нови_интервал[ид] + оцена, МАКС_ИНТЕРВАЛ)
        ред = [
            ид,
            time.strftime('%Y-%m-%d'),
            time.strftime('%H:%M:%S%z'),
            оцена,
            бре.нови_интервал[ид],
        ]
        бре.додај_запис(ред)

    def име(бре):
        return бре._име

    def преполови(бре):
        бре.активне = бре.активне[::2]

    def избаци_промашене(бре):
        бре.активне = [к for к in бре.активне if бре.последња_оцена.get(к[Карта.ИД], 10000) > 0]

    def задржи_само_промашене(бре):
        бре.активне = [к for к in бре.активне if бре.последња_оцена.get(к[Карта.ИД], 10000) == 0]
