import sys
from datetime import date, timedelta
from random import shuffle
from collections import defaultdict
from enum import IntEnum, unique
from наки import tsv
from наки.интервали import ФајлИнтервала
from наки.запис import ФајлЗаписа


@unique
class Карта(IntEnum):
    ИД = 0
    ВРСТА_КАРТЕ = 1
    ПИТАЊЕ = 2
    ОДГОВОР = 3
    ИЗВОР = 4
    ЛИНИЈА = 5


@unique
class Линк(IntEnum):
    ИД = 0
    УРЛ = 1


def направи_карте(извор_фајл, извор, врста_карте, ф_питање, ф_одговор, индекс):
    """ постарај се да индекс буде јединствен при сваком позиву """
    assert 0 <= индекс and индекс < 16
    карте = []
    for линија, џ in enumerate(извор, 2):
        ид = џ[0]  # претпоставка је да је нулто поље ИД
        assert ид[-1] == '0', 'извор ид мора да се завршава са нулом: ' + ид
        ид = ид[:-1] + hex(индекс)[-1]
        карте.append([ид, врста_карте, ф_питање(џ), ф_одговор(џ), извор_фајл, линија])
    return карте


def извор_ид(карта_ид):
    return карта_ид[:-1] + '0'


# TODO: издвој валидацију и консолидацију стања у посебну фазу која се зове пре наки!
def шпил_диск_лоадер(дир):
    фајл_интервала = ФајлИнтервала.учитај(tsv, дир.joinpath('интервали.tsv'))
    карте = tsv.учитај_фајл(дир.joinpath('карте.tsv'), Карта)
    скуп_врста_карте = set()
    for карта in карте:
        скуп_врста_карте.add(карта[Карта.ВРСТА_КАРТЕ])
    фајл_интервала.консолидуј(скуп_врста_карте)
    линкови_фајл = дир.joinpath('линкови.tsv')
    линкови = tsv.учитај_фајл(линкови_фајл, Линк) if линкови_фајл.exists() else []
    фајл_записа = ФајлЗаписа.учитај(tsv, дир.joinpath('запис.tsv'))

    return {
        "име": дир.name,
        "фајл_интервала": фајл_интервала,
        "карте": карте,
        "линкови": линкови,
        "фајл_записа": фајл_записа,
    }


def провери_карта_ид(ид):
    assert len(ид) == 32, f"лоша дужина {ид}"


class Шпил():

    @staticmethod
    def _парсирај_линкове(линкови):
        линк_мапа = {}
        for л in линкови:
            ид = л[Линк.ИД]
            урл = л[Линк.УРЛ]
            провери_карта_ид(ид)
            if ид in линк_мапа:
                raise ValueError(f"Дупли линк ид: {ид}")
            линк_мапа[ид] = урл
        return линк_мапа

    def _може_данас(бре, ид, врста_карте):
        данас = date.today()
        дп = бре.фајл_записа.датум_прегледа(ид)
        индекс_интервала = бре.фајл_записа.индекс_интервала(ид)
        период = бре.фајл_интервала.период_интервала(врста_карте, индекс_интервала)
        ни = timedelta(days=период)
        return данас > дп + ни

    def _парсирај_карте(бре, карте):
        нађено = False
        дупло = set()
        идјеви = set()
        for карта in карте:
            ид = карта[Карта.ИД]
            if ид in идјеви:
                raise ValueError(f"дупли ид: {ид}")
            идјеви.add(ид)
            питање = f"{карта[Карта.ВРСТА_КАРТЕ]}: {карта[Карта.ПИТАЊЕ]}"
            if питање in дупло:
                print(f"ДУПЛИКАТ: {питање}", file=sys.stderr)
                нађено = True
            дупло.add(питање)
        if нађено:
            raise ValueError("ДУПЛИКАТИ")
        активне = [карта for карта in карте if бре._може_данас(карта[Карта.ИД], карта[Карта.ВРСТА_КАРТЕ])]
        return sorted(активне, key=lambda к: к[Карта.ВРСТА_КАРТЕ])

    def __init__(бре, име, фајл_интервала, карте, линкови, фајл_записа):
        бре._име = име
        try:
            бре.фајл_интервала = фајл_интервала
            бре.фајл_записа = фајл_записа
            бре.линк_мапа = бре._парсирај_линкове(линкови)
            бре.активне = бре._парсирај_карте(карте)
        except AssertionError as e:
            raise AssertionError(бре._име, e)

    def рандомизуј(бре):
        по_врсти = defaultdict(list)
        for карта in бре.активне:
            врста = карта[Карта.ВРСТА_КАРТЕ]
            по_врсти[врста].append(карта)
        темп = []
        for в in по_врсти.values():
            shuffle(в)
            темп.extend(в)
        бре.активне = темп

    def __len__(бре):
        return len(бре.активне)

    def __iter__(бре):
        return iter(бре.активне)

    def clear(бре):
        бре.активне.clear()

    def урл(бре, ид):
        return бре.линк_мапа.get(извор_ид(ид), None)

    def оцена(бре, ид, врста_карте, оцена):
        try:
            провери_карта_ид(ид)
            assert оцена in [0, 1, 2], f"инвалидна оцена: {оцена}"
            макс_интервал = бре.фајл_интервала.макс_интервал(врста_карте)
            бре.фајл_записа.додај_нови_интервал(ид, оцена, макс_интервал)
        except AssertionError as e:
            raise AssertionError(бре._име, e)

    def име(бре):
        return бре._име

    def преполови(бре):
        бре.активне = бре.активне[::2]

    def избаци_промашене(бре):
        бре.активне = [к for к in бре.активне if бре.фајл_записа.промашена(к[Карта.ИД])]

    def задржи_само_промашене(бре):
        бре.активне = [к for к in бре.активне if not бре.фајл_записа.промашена(к[Карта.ИД])]
