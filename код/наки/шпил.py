from datetime import date, timedelta
from наки.ид import assert_ид


class Шпил():
    def __init__(бре, дир, п_интервала, п_карти, п_линкова, п_записа):
        бре._дир = дир
        бре.п_интервала = п_интервала
        бре.п_записа = п_записа
        бре.п_линкова = п_линкова
        бре.п_карти = п_карти
        бре.неодрађене = set(карта.ид for карта in бре.п_карти)
        бре.промашене = set()

    def може_данас(бре, индекс, ид, врста_карте):
        данас = date.today()
        дп = бре.п_записа.датум_прегледа(ид)
        индекс_интервала = бре.п_записа.индекс_интервала(ид)
        период = бре.п_интервала.период_интервала(врста_карте, индекс_интервала)
        ни = timedelta(days=период)
        return данас > дп + ни

    def припреми(бре):
        бре.п_интервала.консолидуј(бре.п_карти.скуп_врста_карте)
        бре.п_карти.филтрирај(бре.може_данас)
        бре.п_карти.рандомизуј()
        бре.неодрађене = set(карта.ид for карта in бре.п_карти)
        бре.промашене = set()

    def __len__(бре):
        return len(бре.п_карти)

    def __iter__(бре):
        return iter(бре.п_карти)

    def clear(бре):
        бре.п_карти.clear()

    def урл(бре, ид):
        return бре.п_линкова.линк(ид)

    def оцена(бре, ид, врста_карте, оцена):
        try:
            assert_ид(ид)
            assert оцена in [0, 1, 2], f"инвалидна оцена: {оцена}"
            бре.п_записа.додај_нови_интервал(ид, оцена)
            бре.неодрађене.discard(ид)
            if оцена > 0:
                бре.промашене.discard(ид)
            else:
                бре.промашене.add(ид)
        except AssertionError as e:
            raise AssertionError(бре.име()) from e

    def име(бре):
        return бре._дир.name

    def преполови(бре):
        def филтер(индекс, ид, врста_карте):
            return индекс % 2 == 0
        бре.п_карти.филтрирај(филтер)
        бре.припреми()

    def избаци_промашене(бре):
        def филтер(индекс, ид, врста_карте):
            return бре.п_записа.промашена(ид)
        бре.п_карти.филтрирај(филтер)
        бре.припреми()

    def задржи_само_промашене(бре):
        def филтер(индекс, ид, врста_карте):
            return not бре.п_записа.промашена(ид)
        бре.п_карти.филтрирај(филтер)
        бре.припреми()

    def сиже(бре):
        return (len(бре.неодрађене), len(бре.промашене))

